From b4c395aaedfacb32e2414d361fa85968c0991b34 Mon Sep 17 00:00:00 2001
From: Deanna Garcia <deannagarcia@google.com>
Date: Tue, 13 Sep 2022 16:35:58 +0000
Subject: [PATCH] Apply patch

--- protobuf-3.6.1.3.orig/src/google/protobuf/extension_set_heavy.cc
+++ protobuf-3.6.1.3/src/google/protobuf/extension_set_heavy.cc
@@ -668,56 +668,68 @@ bool ExtensionSet::ParseMessageSetItem(i
   //   required int32 type_id = 2;
   //   required data message = 3;
 
-  uint32 last_type_id = 0;
+  uint32 type_id = 0;
 
   // If we see message data before the type_id, we'll append it to this so
   // we can parse it later.
   string message_data;
 
+  enum State { kNoTag, kHasType, kHasPayload, kDone };
+  State state = kNoTag;
+
   while (true) {
     const uint32 tag = input->ReadTagNoLastTag();
     if (tag == 0) return false;
 
     switch (tag) {
       case WireFormatLite::kMessageSetTypeIdTag: {
-        uint32 type_id;
-        if (!input->ReadVarint32(&type_id)) return false;
-        last_type_id = type_id;
+        
+        uint32 tmp;
+        if (!input->ReadVarint32(&tmp)) return false;
+        if (state == kNoTag) {
+          type_id = tmp;
+          state = kHasType;
+        } else if (state == kHasPayload) {
+          type_id = tmp;
 
-        if (!message_data.empty()) {
           // We saw some message data before the type_id.  Have to parse it
           // now.
           io::CodedInputStream sub_input(
               reinterpret_cast<const uint8*>(message_data.data()),
               message_data.size());
           if (!ParseFieldMaybeLazily(WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
-                                     last_type_id, &sub_input,
+                                     type_id, &sub_input,
                                      extension_finder, field_skipper)) {
             return false;
           }
           message_data.clear();
+          state = kDone;
         }
 
         break;
       }
 
       case WireFormatLite::kMessageSetMessageTag: {
-        if (last_type_id == 0) {
+        if (state == kHasType) {
+          // Already saw type_id, so we can parse this directly.
+          if (!ParseFieldMaybeLazily(WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
+                                     type_id, input,
+                                     extension_finder, field_skipper)) {
+            return false;
+          }
+          state = kDone;
+        } else {
           // We haven't seen a type_id yet.  Append this data to message_data.
           string temp;
           uint32 length;
           if (!input->ReadVarint32(&length)) return false;
           if (!input->ReadString(&temp, length)) return false;
-          io::StringOutputStream output_stream(&message_data);
-          io::CodedOutputStream coded_output(&output_stream);
-          coded_output.WriteVarint32(length);
-          coded_output.WriteString(temp);
-        } else {
-          // Already saw type_id, so we can parse this directly.
-          if (!ParseFieldMaybeLazily(WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
-                                     last_type_id, input,
-                                     extension_finder, field_skipper)) {
-            return false;
+          if (state == kNoTag) {
+            io::StringOutputStream output_stream(&message_data);
+            io::CodedOutputStream coded_output(&output_stream);
+            coded_output.WriteVarint32(length);
+            coded_output.WriteString(temp);
+            state = kHasPayload;
           }
         }
 
--- protobuf-3.6.1.3.orig/src/google/protobuf/wire_format.cc
+++ protobuf-3.6.1.3/src/google/protobuf/wire_format.cc
@@ -734,6 +734,9 @@ bool WireFormat::ParseAndMergeMessageSet
   // we can parse it later.
   string message_data;
 
+  enum State { kNoTag, kHasType, kHasPayload, kDone };
+  State state = kNoTag;
+
   while (true) {
     uint32 tag = input->ReadTag();
     if (tag == 0) return false;
@@ -742,27 +745,37 @@ bool WireFormat::ParseAndMergeMessageSet
       case WireFormatLite::kMessageSetTypeIdTag: {
         uint32 type_id;
         if (!input->ReadVarint32(&type_id)) return false;
-        last_type_id = type_id;
-        field = message_reflection->FindKnownExtensionByNumber(type_id);
 
-        if (!message_data.empty()) {
+        if (state == kNoTag) {
+          last_type_id = type_id;
+          state = kHasType;
+        } else if (state == kHasPayload) {
           // We saw some message data before the type_id.  Have to parse it
           // now.
           io::ArrayInputStream raw_input(message_data.data(),
                                          message_data.size());
           io::CodedInputStream sub_input(&raw_input);
-          if (!ParseAndMergeMessageSetField(last_type_id, field, message,
+          field = message_reflection->FindKnownExtensionByNumber(type_id);
+          if (!ParseAndMergeMessageSetField(type_id, field, message,
                                             &sub_input)) {
             return false;
           }
           message_data.clear();
+          state = kDone;
         }
 
         break;
       }
 
       case WireFormatLite::kMessageSetMessageTag: {
-        if (last_type_id == 0) {
+        if (state == kHasType) {
+          // Already saw type_id, so we can parse this directly.
+          field = message_reflection->FindKnownExtensionByNumber(last_type_id);
+          if (!ParseAndMergeMessageSetField(last_type_id, field, message, input)) {
+            return false;
+          }
+          state = kDone;
+        } else if (state == kNoTag) {
           // We haven't seen a type_id yet.  Append this data to message_data.
           string temp;
           uint32 length;
@@ -772,12 +785,9 @@ bool WireFormat::ParseAndMergeMessageSet
           io::CodedOutputStream coded_output(&output_stream);
           coded_output.WriteVarint32(length);
           coded_output.WriteString(temp);
+          state = kHasPayload;
         } else {
-          // Already saw type_id, so we can parse this directly.
-          if (!ParseAndMergeMessageSetField(last_type_id, field, message,
-                                            input)) {
-            return false;
-          }
+          if (!SkipField(input, tag, NULL)) return false;
         }
 
         break;
--- protobuf-3.6.1.3.orig/src/google/protobuf/wire_format_unittest.cc
+++ protobuf-3.6.1.3/src/google/protobuf/wire_format_unittest.cc
@@ -49,6 +49,8 @@
 #include <google/protobuf/testing/googletest.h>
 #include <gtest/gtest.h>
 #include <google/protobuf/stubs/stl_util.h>
+#include <google/protobuf/dynamic_message.h>
+#include <boost/scoped_ptr.hpp>
 
 namespace google {
 namespace protobuf {
@@ -563,34 +565,64 @@ TEST(WireFormatTest, ParseMessageSet) {
   EXPECT_EQ(message_set.DebugString(), dynamic_message_set.DebugString());
 }
 
-TEST(WireFormatTest, ParseMessageSetWithReverseTagOrder) {
+namespace {
+std::string BuildMessageSetItemStart() {
   string data;
   {
-    unittest::TestMessageSetExtension1 message;
-    message.set_i(123);
-    // Build a MessageSet manually with its message content put before its
-    // type_id.
     io::StringOutputStream output_stream(&data);
     io::CodedOutputStream coded_output(&output_stream);
     coded_output.WriteTag(WireFormatLite::kMessageSetItemStartTag);
+  }
+  return data;
+}
+std::string BuildMessageSetItemEnd() {
+  std::string data;
+  {
+    io::StringOutputStream output_stream(&data);
+    io::CodedOutputStream coded_output(&output_stream);
+    coded_output.WriteTag(WireFormatLite::kMessageSetItemEndTag);
+  }
+  return data;
+}
+std::string BuildMessageSetTestExtension1(int value = 123) {
+  std::string data;
+  {
+    unittest::TestMessageSetExtension1 message;
+    message.set_i(value);
+    io::StringOutputStream output_stream(&data);
+    io::CodedOutputStream coded_output(&output_stream);
     // Write the message content first.
     WireFormatLite::WriteTag(WireFormatLite::kMessageSetMessageNumber,
                              WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
                              &coded_output);
     coded_output.WriteVarint32(message.ByteSize());
     message.SerializeWithCachedSizes(&coded_output);
-    // Write the type id.
-    uint32 type_id = message.GetDescriptor()->extension(0)->number();
+  }
+  return data;
+}
+std::string BuildMessageSetItemTypeId(int extension_number) {
+  std::string data;
+  {
+    io::StringOutputStream output_stream(&data);
+    io::CodedOutputStream coded_output(&output_stream);
     WireFormatLite::WriteUInt32(WireFormatLite::kMessageSetTypeIdNumber,
-                                type_id, &coded_output);
-    coded_output.WriteTag(WireFormatLite::kMessageSetItemEndTag);
+                                extension_number, &coded_output);
   }
+  return data;
+}
+void ValidateTestMessageSet(const std::string& test_case,
+                            const std::string& data) {
+  SCOPED_TRACE(test_case);
   {
     proto2_wireformat_unittest::TestMessageSet message_set;
     ASSERT_TRUE(message_set.ParseFromString(data));
 
     EXPECT_EQ(123, message_set.GetExtension(
         unittest::TestMessageSetExtension1::message_set_extension).i());
+    // Make sure it does not contain anything else.
+    message_set.ClearExtension(
+        unittest::TestMessageSetExtension1::message_set_extension);
+    EXPECT_EQ(message_set.SerializeAsString(), "");
   }
   {
     // Test parse the message via Reflection.
@@ -603,6 +635,61 @@ TEST(WireFormatTest, ParseMessageSetWith
     EXPECT_EQ(123, message_set.GetExtension(
         unittest::TestMessageSetExtension1::message_set_extension).i());
   }
+  {
+    // Test parse the message via DynamicMessage.
+    DynamicMessageFactory factory;
+    boost::scoped_ptr<Message> msg(
+        factory
+            .GetPrototype(
+                proto2_wireformat_unittest::TestMessageSet::descriptor())
+            ->New());
+    msg->ParseFromString(data);
+    const Reflection* reflection = msg->GetReflection();
+    std::vector<const FieldDescriptor*> fields;
+    reflection->ListFields(*msg, &fields);
+    ASSERT_EQ(fields.size(), 1);
+    const Message& sub = reflection->GetMessage(*msg, fields[0]);
+    reflection = sub.GetReflection();
+    EXPECT_EQ(123, reflection->GetInt32(
+                       sub, sub.GetDescriptor()->FindFieldByName("i")));
+  }
+}
+}  // namespace
+
+TEST(WireFormatTest, ParseMessageSetWithAnyTagOrder) {
+  std::string start = BuildMessageSetItemStart();
+  std::string end = BuildMessageSetItemEnd();
+  std::string id = BuildMessageSetItemTypeId(
+      unittest::TestMessageSetExtension1::descriptor()->extension(0)->number());
+  std::string message = BuildMessageSetTestExtension1();
+
+  ValidateTestMessageSet("id + message", start + id + message + end);
+  ValidateTestMessageSet("message + id", start + message + id + end);
+}
+
+TEST(WireFormatTest, ParseMessageSetWithDuplicateTags) {
+  std::string start = BuildMessageSetItemStart();
+  std::string end = BuildMessageSetItemEnd();
+  std::string id = BuildMessageSetItemTypeId(
+      unittest::TestMessageSetExtension1::descriptor()->extension(0)->number());
+  std::string other_id = BuildMessageSetItemTypeId(123456);
+  std::string message = BuildMessageSetTestExtension1();
+  std::string other_message = BuildMessageSetTestExtension1(321);
+
+  // Double id
+  ValidateTestMessageSet("id + other_id + message",
+                         start + id + other_id + message + end);
+  ValidateTestMessageSet("id + message + other_id",
+                         start + id + message + other_id + end);
+  ValidateTestMessageSet("message + id + other_id",
+                         start + message + id + other_id + end);
+  // Double message
+  ValidateTestMessageSet("id + message + other_message",
+                         start + id + message + other_message + end);
+  ValidateTestMessageSet("message + id + other_message",
+                         start + message + id + other_message + end);
+  ValidateTestMessageSet("message + other_message + id",
+                         start + message + other_message + id + end);
 }
 
 TEST(WireFormatTest, ParseBrokenMessageSet) {
